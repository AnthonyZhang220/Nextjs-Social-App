// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  displayName String
  email       String    @unique
  createdAt   DateTime  @default(now())
  posts       Post[]
  profile     Profile?
  friends     Friend[]
  comment     Comment[]
  like        Like[]
  mention     Tag[]
  Account     Account[]
  sessions    Session[]

  @@map("user")
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String // Name or label for the location (e.g., "Eiffel Tower")
  latitude  Float // Latitude coordinate (e.g., 48.858844)
  longitude Float // Longitude coordinate (e.g., 2.294351)
  city      String? // City where the location is located
  country   String? // Country where the location is located
  Profile   Profile[]
}

model Friend {
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @unique
}

model Tag {
  id              String   @id @default(uuid())
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String   @unique
  comment         Comment? @relation(fields: [commentAuthorId], references: [authorId])
  commentAuthorId String?
}

model Image {
  id    String  @id @default(uuid())
  src   String?
  media Media   @relation(fields: [id], references: [id])
}

model Media {
  id       String  @id @default(uuid())
  hasImage Boolean
  hasVideo Boolean
  image    Image[]
  video    String
  Post     Post?   @relation(fields: [postId], references: [id])
  postId   String?
}

model Comment {
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @unique
  content  String
  post     Post?   @relation(fields: [postId], references: [id])
  postId   String?

  mention Tag[]
}

model Like {
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @unique
  post     Post?   @relation(fields: [postId], references: [id])
  postId   String?
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String    @db.VarChar(255)
  content   String?
  draft     Boolean   @default(true)
  like      Like[]
  comment   Comment[]
  media     Media[]
  view      Int
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
}

model Profile {
  id         String    @id @default(uuid())
  photo      String
  bio        String?
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
}
