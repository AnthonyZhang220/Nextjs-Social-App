// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String       @id @default(uuid())
  name          String?
  username      String?      @unique
  displayName   String?
  image         String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  posts         Post[]
  profile       Profile?
  friends       Friendship[] @relation("friends")
  friendOf      Friendship[] @relation("friendOf")
  comments      Comment[]
  likes         Like[]
  mentions      Tag[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Friendship {
  friends    User   @relation("friends", fields: [friendsId], references: [id])
  friendsId  String
  friendOf   User   @relation("friendOf", fields: [friendOfId], references: [id])
  friendOfId String

  @@id([friendOfId, friendsId])
}

model Profile {
  id         String    @id @default(uuid())
  avatar     String?
  banner     String?
  bio        String?
  profession String?
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Location {
  id        String    @id @default(uuid())
  name      String? // Name or label for the location (e.g., "Eiffel Tower")
  latitude  Float? // Latitude coordinate (e.g., 48.858844)
  longitude Float? // Longitude coordinate (e.g., 2.294351)
  city      String? // City where the location is located
  country   String? // Country where the location is located
  profile   Profile[]

  @@map("location")
}

model Tag {
  id              String   @id @default(uuid())
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String   @unique
  comment         Comment? @relation(fields: [commentAuthorId], references: [authorId])
  commentAuthorId String?
}

model Image {
  id    String  @id @default(uuid())
  src   String?
  media Media   @relation(fields: [id], references: [id])
}

model Media {
  id       String  @id @default(uuid())
  image    Image[]
  videoSrc String?
  post     Post    @relation(fields: [postId], references: [id])
  postId   String
}

model Comment {
  id       String  @id @default(uuid())
  content  String
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @unique
  post     Post?   @relation(fields: [postId], references: [id])
  postId   String?
  mention  Tag[]
}

model Like {
  id       String @id @default(uuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @unique
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
}

model Post {
  id        String     @id @default(uuid())
  visibleTo Visible
  published Boolean    @default(true)
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  title     String?    @db.VarChar(255)
  content   String?
  likes     Like[]
  comments  Comment[]
  media     Media[]
  category  Category[]
  viewCount Int
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String

  @@map("posts")
}

enum Visible {
  Everyone
  Friends
  Me
}

model Category {
  id       String  @id @default(uuid())
  category String  @unique
  post     Post?   @relation(fields: [postId], references: [id])
  postId   String?
}
